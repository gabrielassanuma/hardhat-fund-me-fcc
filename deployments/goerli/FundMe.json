{
  "address": "0x1Cb0c89039Caa7C00fA6D6B02e8a3aF27a1B4F13",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e28a98997c11485dd10fffe9bb27fdcc9c2d5a4f621e66383df9fd1dff2e0a9",
  "receipt": {
    "to": null,
    "from": "0x46B2CEe074ea41259492F4331c652117992e99d7",
    "contractAddress": "0x1Cb0c89039Caa7C00fA6D6B02e8a3aF27a1B4F13",
    "transactionIndex": 72,
    "gasUsed": "872591",
    "logsBloom": "0x
    "blockHash": "0x93b71b9be38e09c04a384f2f7dcb7854182fb8ae62a1670eb84fef7817484f0a",
    "transactionHash": "0x1e28a98997c11485dd10fffe9bb27fdcc9c2d5a4f621e66383df9fd1dff2e0a9",
    "logs": [],
    "blockNumber": 7730099,
    "cumulativeGasUsed": "24832572",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 3,
  "solcInputHash": "c75ad7be9bbad496aaf186bd2f2958ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    address public immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n    // modifier onlyOwner allow smart contract creator to call functions inside smart contract\\n    // set up AggregatorV3Interface as a Global variable to be used on this Smart contract and PriceConverter.sol\\n    AggregatorV3Interface public priceFeed;\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // priceFeedAddress should be passed to pick network of choice to work with properly API key and get value converted\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        // priceFeed refactored to work with differentes networks and differents API keys\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // fund function converts tokens value into USD, check if donation is over the minimum limit, transfer fund and push funder to funders array\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n\\n    // withdraw function will iterate over funders array send balances to creator smart contract address\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc91fbe419f805595205d94a4980a0d2637597eb25d5c64e31f2df9dc4438cd66\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n// imported chainlink scripted to convert ethers into USD\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Price converter will be used into FundMe Contract to convert ethers into USD.\\n// library PriceConverter iteract with chain link and converts tokens value into USD.\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // priceFeed will set up with API should be used to convert ethers into USD\\n        uint256 ethPrice = getPrice(priceFeed);\\n        // using 1e18 notation to avoid rounded problems with values\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x9e7bd3a5ae6428e0d2d229f490cdd73efa5c12871a00f56f50ce537088d83d32\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405162000fcf38038062000fcf83398181016040528101906100349190610115565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e2826100b7565b9050919050565b6100f2816100d7565b81146100fd57600080fd5b50565b60008151905061010f816100e9565b92915050565b60006020828403121561012b5761012a6100b2565b5b600061013984828501610100565b91505092915050565b60805160601c610e67620001686000396000818161019301526105580152610e676000f3fe6080604052600436106100705760003560e01c8063741bef1a1161004e578063741bef1a146100f4578063b60d42881461011f578063dba6335f14610129578063dc0d3dff1461015457610070565b80633ccfd60b146100755780633e47d6f31461008c5780636b69a592146100c9575b600080fd5b34801561008157600080fd5b5061008a610191565b005b34801561009857600080fd5b506100b360048036038101906100ae919061079f565b6103d1565b6040516100c091906107e5565b60405180910390f35b3480156100d557600080fd5b506100de6103e9565b6040516100eb91906107e5565b60405180910390f35b34801561010057600080fd5b506101096103f6565b604051610116919061085f565b60405180910390f35b61012761041c565b005b34801561013557600080fd5b5061013e610556565b60405161014b9190610889565b60405180910390f35b34801561016057600080fd5b5061017b600480360381019061017691906108d0565b61057a565b6040516101889190610889565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610216576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102c15760006001828154811061023c5761023b6108fd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102b99061095b565b915050610219565b50600067ffffffffffffffff8111156102dd576102dc6109a4565b5b60405190808252806020026020018201604052801561030b5781602001602082028036833780820191505090505b5060019080519060200190610321929190610695565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161034890610a04565b60006040518083038185875af1925050503d8060008114610385576040519150601f19603f3d011682016040523d82523d6000602084013e61038a565b606091505b50509050806103ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c590610a76565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000061045b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105b990919063ffffffff16565b101561049c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049390610ae2565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104ea9190610b02565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061058a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105c5836105f5565b90506000670de0b6b3a764000085836105de9190610b58565b6105e89190610be1565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190610c9f565b5050509150506402540be4008161068d9190610d1a565b915050919050565b82805482825590600052602060002090810192821561070e579160200282015b8281111561070d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b5565b5b50905061071b919061071f565b5090565b5b80821115610738576000816000905550600101610720565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076c82610741565b9050919050565b61077c81610761565b811461078757600080fd5b50565b60008135905061079981610773565b92915050565b6000602082840312156107b5576107b461073c565b5b60006107c38482850161078a565b91505092915050565b6000819050919050565b6107df816107cc565b82525050565b60006020820190506107fa60008301846107d6565b92915050565b6000819050919050565b600061082561082061081b84610741565b610800565b610741565b9050919050565b60006108378261080a565b9050919050565b60006108498261082c565b9050919050565b6108598161083e565b82525050565b60006020820190506108746000830184610850565b92915050565b61088381610761565b82525050565b600060208201905061089e600083018461087a565b92915050565b6108ad816107cc565b81146108b857600080fd5b50565b6000813590506108ca816108a4565b92915050565b6000602082840312156108e6576108e561073c565b5b60006108f4848285016108bb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610966826107cc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109995761099861092c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006109ee6000836109d3565b91506109f9826109de565b600082019050919050565b6000610a0f826109e1565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610a60600b83610a19565b9150610a6b82610a2a565b602082019050919050565b60006020820190508181036000830152610a8f81610a53565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610acc601b83610a19565b9150610ad782610a96565b602082019050919050565b60006020820190508181036000830152610afb81610abf565b9050919050565b6000610b0d826107cc565b9150610b18836107cc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b4d57610b4c61092c565b5b828201905092915050565b6000610b63826107cc565b9150610b6e836107cc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ba757610ba661092c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bec826107cc565b9150610bf7836107cc565b925082610c0757610c06610bb2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c3181610c12565b8114610c3c57600080fd5b50565b600081519050610c4e81610c28565b92915050565b6000819050919050565b610c6781610c54565b8114610c7257600080fd5b50565b600081519050610c8481610c5e565b92915050565b600081519050610c99816108a4565b92915050565b600080600080600060a08688031215610cbb57610cba61073c565b5b6000610cc988828901610c3f565b9550506020610cda88828901610c75565b9450506040610ceb88828901610c8a565b9350506060610cfc88828901610c8a565b9250506080610d0d88828901610c3f565b9150509295509295909350565b6000610d2582610c54565b9150610d3083610c54565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d6f57610d6e61092c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dac57610dab61092c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610de957610de861092c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e2657610e2561092c565b5b82820290509291505056fea2646970667358221220bcb14dca67d15512670d6afc864bb108e607bf9fb15ec0cb646c2260e2c6a0c264736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063741bef1a1161004e578063741bef1a146100f4578063b60d42881461011f578063dba6335f14610129578063dc0d3dff1461015457610070565b80633ccfd60b146100755780633e47d6f31461008c5780636b69a592146100c9575b600080fd5b34801561008157600080fd5b5061008a610191565b005b34801561009857600080fd5b506100b360048036038101906100ae919061079f565b6103d1565b6040516100c091906107e5565b60405180910390f35b3480156100d557600080fd5b506100de6103e9565b6040516100eb91906107e5565b60405180910390f35b34801561010057600080fd5b506101096103f6565b604051610116919061085f565b60405180910390f35b61012761041c565b005b34801561013557600080fd5b5061013e610556565b60405161014b9190610889565b60405180910390f35b34801561016057600080fd5b5061017b600480360381019061017691906108d0565b61057a565b6040516101889190610889565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610216576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102c15760006001828154811061023c5761023b6108fd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102b99061095b565b915050610219565b50600067ffffffffffffffff8111156102dd576102dc6109a4565b5b60405190808252806020026020018201604052801561030b5781602001602082028036833780820191505090505b5060019080519060200190610321929190610695565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161034890610a04565b60006040518083038185875af1925050503d8060008114610385576040519150601f19603f3d011682016040523d82523d6000602084013e61038a565b606091505b50509050806103ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c590610a76565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000061045b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105b990919063ffffffff16565b101561049c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049390610ae2565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104ea9190610b02565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061058a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105c5836105f5565b90506000670de0b6b3a764000085836105de9190610b58565b6105e89190610be1565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063e57600080fd5b505afa158015610652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106769190610c9f565b5050509150506402540be4008161068d9190610d1a565b915050919050565b82805482825590600052602060002090810192821561070e579160200282015b8281111561070d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b5565b5b50905061071b919061071f565b5090565b5b80821115610738576000816000905550600101610720565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061076c82610741565b9050919050565b61077c81610761565b811461078757600080fd5b50565b60008135905061079981610773565b92915050565b6000602082840312156107b5576107b461073c565b5b60006107c38482850161078a565b91505092915050565b6000819050919050565b6107df816107cc565b82525050565b60006020820190506107fa60008301846107d6565b92915050565b6000819050919050565b600061082561082061081b84610741565b610800565b610741565b9050919050565b60006108378261080a565b9050919050565b60006108498261082c565b9050919050565b6108598161083e565b82525050565b60006020820190506108746000830184610850565b92915050565b61088381610761565b82525050565b600060208201905061089e600083018461087a565b92915050565b6108ad816107cc565b81146108b857600080fd5b50565b6000813590506108ca816108a4565b92915050565b6000602082840312156108e6576108e561073c565b5b60006108f4848285016108bb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610966826107cc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109995761099861092c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006109ee6000836109d3565b91506109f9826109de565b600082019050919050565b6000610a0f826109e1565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610a60600b83610a19565b9150610a6b82610a2a565b602082019050919050565b60006020820190508181036000830152610a8f81610a53565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610acc601b83610a19565b9150610ad782610a96565b602082019050919050565b60006020820190508181036000830152610afb81610abf565b9050919050565b6000610b0d826107cc565b9150610b18836107cc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b4d57610b4c61092c565b5b828201905092915050565b6000610b63826107cc565b9150610b6e836107cc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ba757610ba661092c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bec826107cc565b9150610bf7836107cc565b925082610c0757610c06610bb2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c3181610c12565b8114610c3c57600080fd5b50565b600081519050610c4e81610c28565b92915050565b6000819050919050565b610c6781610c54565b8114610c7257600080fd5b50565b600081519050610c8481610c5e565b92915050565b600081519050610c99816108a4565b92915050565b600080600080600060a08688031215610cbb57610cba61073c565b5b6000610cc988828901610c3f565b9550506020610cda88828901610c75565b9450506040610ceb88828901610c8a565b9350506060610cfc88828901610c8a565b9250506080610d0d88828901610c3f565b9150509295509295909350565b6000610d2582610c54565b9150610d3083610c54565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d6f57610d6e61092c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dac57610dab61092c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610de957610de861092c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e2657610e2561092c565b5b82820290509291505056fea2646970667358221220bcb14dca67d15512670d6afc864bb108e607bf9fb15ec0cb646c2260e2c6a0c264736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}